# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
grades <- list(
exam_1 = c(100, 94, 93),
exam_2 = c(88, 91, 98)
)
lapply(grades, min)
lapply(min, grades)
lapply(grades, min())
min(grades)
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
)
applicant["languages"]
applicant$languages
applicant[["languages"]]
applicant[languages]
prices <- c(9, 44, 2, 3, 5)
prices[prices < 5] <- 5
a <- c(4, 4, 8)
b <- c(2, 1)
c <- a + b
# A vector of student names
student_names <- c("Nate", "Ani", "Jeremy", "Daria")
# A vector of student grades (that correspond to the names above based on their position)
student_grades <- c(82, 74, 91, 92)
student_names[student_grades > 82]
prices <- c(100, 200)
sqrt_prices <- sqrt(prices)
prices <- list(p1=100, p2=200)
lapply(prices, sqrt)
help list
?list
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('nothing')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('pasta', 'bread', 'soda')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner('spaggetti', 'garlic bread', 'cookie dough')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[lunch]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('nothing')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('pasta', 'bread', 'soda')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c('spaggetti', 'garlic bread', 'cookie dough')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[my_lunch]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('nothing')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('pasta', 'bread', 'soda')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c('spaggetti', 'garlic bread', 'cookie dough')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[["my_lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('nothing')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('pasta', 'bread', 'soda')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c('spaggetti', 'garlic bread', 'cookie dough')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$meals2 <- meals[["my_lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[my_breakfast, my_lunch]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('nothing')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('pasta', 'bread', 'soda')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c('spaggetti', 'garlic bread', 'cookie dough')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$meals2 <- meals[["my_lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c(my_breakfast, my_lunch)]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
points <- c(24, 17, 24, 20)
points_for <- c(24, 17, 24, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_against <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points_for, points_against)
games$diff <- c(3, 7, 11, 3)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points_for, points_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- c(3, 7, 11, 3)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- c(F, F, T, T)
# Create a vector of the opponent names corresponding to the games played
games$Opponent <- c("Broncos", "Bears", "Cowboys", "Cardinals")
Opponent <- c("Broncos", "Bears", "Cowboys", "Cardinals")
games$Opponent
view(games)
View(games)
library(lintr)
lint("excercise.R")
View(games)
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_for <- c(24, 17, 24, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_against <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points_for, points_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- c(3, 7, 11, 3)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- c(F, F, T, T)
# Create a vector of the opponent names corresponding to the games played
Opponent <- c("Broncos", "Bears", "Cowboys", "Cardinals")
# Assign your dataframe rownames of their opponents
games$Opponent
# View your data frame to see how it has changed!
View(games)
games$diff <- abs(games$points_for - games$points_against)
games$won <- games$points_for - games$points_against > 0
View(games)
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_for <- c(24, 17, 24, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_against <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points_for, points_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- abs(games$points_for - games$points_against)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$points_for - games$points_against > 0
# Create a vector of the opponent names corresponding to the games played
Opponent <- c("Broncos", "Bears", "Cowboys", "Cardinals")
# Assign your dataframe rownames of their opponents
games$Opponent
# View your data frame to see how it has changed!
View(games)
games$Opponent <- Opponent
View(games)
games[games$won == F, "points_against", "points_for"]
games[games$won == F, "points_against" && "points_for"]
games[games$won == F, "Opponents"]
games[games$won == FALSE , "opponents"]
games[games$won == FALSE , "\Opponents"]
games[games$won == FALSE , "Opponents"]
colnames(games)
rownames(games) <- Opponent
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_for <- c(24, 17, 24, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_against <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points_for, points_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- abs(games$points_for - games$points_against)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$points_for - games$points_against > 0
# Create a vector of the opponent names corresponding to the games played
Opponent <- c("Broncos", "Bears", "Cowboys", "Cardinals")
# Assign your dataframe rownames of their opponents
rownames(games) <- Opponent
# View your data frame to see how it has changed!
View(games)
clear
employees <- paste("Employee", C(1:100))
employees <- c(paste("Employee", 1:100))
salary <- c(runif(40000,50000))
salary <- c(1:100,runif(40000,50000))
salary <- c(runif(100, 40000, 50000))
salary_2017 <- c(runif(100, 40000, 50000))
salary_adj <- c(runif(100, -5000, 10000))
salaries <- data.frame(employees, salary_2017, salary_adj, stringAsFactors = FALSE)
View(salaries)
salaries$sal_2018 <- salary_2017 + salary_adj
View(salaries)
salaries$raise <- salary_2017 < sal_2018
salaries$raise <- salary_2017 < salaries$sal_2018
View(salaries)
salaries[[5, "sal_2018"]]
sum(raise == TRUE)
sum(salaries$raise == TRUE)
max(salaries$salary_adj)
salaries[[max(salaries$salary_adj), "employees"]]
salaries[max(salaries$salary_adj), "employees"]
AVG(salary_adj)
AVG(salaries$salary_adj)
avg(salaries$salary_adj)
mean(salaries$salary_adj)
mean(salaries$salary_adj, salaries$raise == F)
mean( salaries$raise(salaries$salary_adj) == F)
mean( salaries[raise == F, (salaries$salary_adj)])
mean(salaries[raise == F, salaries$salary_adj])
mean(salaries[salaries$raise == F, salaries$salary_adj])
mean(salaries[salaries$raise == F, "salary_adj"])
install.packages(carData)
install.packages('carData')
data(Florida)
View(Florida)
data()
data(package = .packages(all.available = TRUE))
View('Florida')
data.frame('Florida')
carData::Florida
nrow(Florida[GORE > BUSH,])
nrow(carData::Florida[GORE > BUSH,])
data.frame(carData::Florida)
Florida <- data.frame(carData::Florida)
nrow(Florida[GORE > BUSH,])
Florida[Florida$GORE > Florida$BUSH,]
nrow(Florida[,Florida$GORE > Florida$BUSH])
nrow(Florida[Florida$GORE > Florida$BUSH,])
rownames(Florida[Florida$Total = max(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
View(Florida)
SUM(Nader.votes)
colnames(Florida)
SUM(Florida[, "NADER"])
sum(Florida[, "NADER"])
sum(Florida[Florida$GORE > Florida$BUSH,"NADER"])
nrow(Florida[Florida$GORE > Florida$BUSH,])
rownames(Florida[Florida$Total == max(Florida$Total),])
install.packages("pscl")
library("pscl")
View(presidentialElections)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("tidry")
install.packages("tidyr")
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
install.packages("nycflights13")
install.package("nycflights13")
install.packages(nycflights13)
install.packages("nycflights13")
library(nycflights13)
View(flight)
View(flights)
group_by(flights, dest)
lateness <- group_by(flights, dest)
summary(lateness, mean(arr_delay))
most_late <- flights %>% group_by(flights, dest) %>% select(flights, arr_delay == mean(arr_delay))
most_late <- flights %>% group_by(dest) %>% select(arr_delay == mean(arr_delay)) %>% arrange(-arr_delay)
most_late <- flights %>% group_by(dest) %>% select(arr_delay == mean(arr_delay))
most_late <- flights %>% group_by(dest) %>% summarize(arr_delay == mean(arr_delay))
most_late <- flights %>% group_by(dest) %>% summarize(arr_delay)
summarize(lateness)
summarize(lateness, arr_delay == mean(arr_delay))
average_late <- summarize(
lateness,
mean_late = mean(arr_delay),
)
View(average_late)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
late <- flights %>% group_by(dest) %>% summarize(arr_delay) %>% filter(arr_delay == max(arr_delay)) %>% pull(dest)
late <- flights %>% group_by(dest) %>% summarize(arr_delay) %>% filter(avg_late == max(arr_delay)) %>% pull(dest)
late <- flights %>% group_by(dest) %>% summarize(arr_late == mean(arr_delay)) %>% filter(avg_delay == max(arr_delay)) %>% pull(dest)
late <- flights %>% group_by(dest) %>% summarize(arr_delay == mean(arr_delay)) %>% filter(avg_delay == max(arr_delay)) %>% pull(dest)
late <- flights %>% group_by(dest) %>% summarize(how_late == mean(arr_delay)) %>% filter(avg_delay == max(arr_delay)) %>% pull(dest)
flights %>% group_by(dest) %>% summarize(mean(arr_delay))
flights %>% group_by(dest) %>% summarize(mean(arr_delay)) %>% arrange(-arr_delay)
flights %>% group_by(dest) %>% summarize(mean(arr_delay))
flights %>% group_by(dest) %>% summarize(value == mean(arr_delay)) %>% filter(value == max(value))
flights %>% group_by(dest) %>% summarize("value" == mean(arr_delay)) %>% filter(value == max(value))
flights %>% group_by(dest) %>% summarize(arr_delay == mean(arr_delay))
flights %>% group_by(dest) %>% summarize(mean(arr_delay))
all_delay <- flights %>% group_by(dest) %>% summarize(mean(arr_delay))
arrange(all_delay, <dbl>)
arrange(all_delay, dbl)
View(average_late)
grouped <- group_by(flights, dest)
summ <- summarize(grouped, mean(arr_delay))
View(summ)
summ <- summarize(grouped, mean(arr_delay, na.rm = TRUE))
View(summ)
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
install.packages("ggplot2")
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
install.packages(ggmap)
install.packages("ggmap")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
kaggle <- read.csv("data/albumlist.csv")
sum_information <- get_summary_info(kaggle)
sum_information <- get_summary_info(kaggle)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
source("scripts/summary_table.R")
source("scripts/sum-info.R")
kaggle <- read.csv("data/albumlist.csv")
sum_information <- get_summary_info(kaggle)
View(sum_information)
setwd("~/UW/Sophomore/SP 19/INFO 201 Final Project/purple_wranglers")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
kaggle <- read.csv("data/albumlist.csv")
sum_information <- get_summary_info(kaggle)
# Summary Info
library(dplyr)
test_df <- read.csv("../data/albumlist.csv")
get_summary_info <- function(data_set) {
artist_1 <- data_set %>%
filter(Number == 1) %>%
pull(Artist)
album_1 <- data_set %>%
filter(Number == 1) %>%
pull(Album)
year_1 <- data_set %>%
filter(Number == 1) %>%
pull(Year)
artist_most_num <- data_set %>%
group_by(Artist) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
most_recent_album <- data_set %>%
filter(Year == max(Year)) %>%
pull(Album)
most_recent_artist <- data_set %>%
filter(Year == max(Year)) %>%
pull(Artist)
most_recent_year <- data_set %>%
filter(Year == max(Year)) %>%
pull(Year)
year_with_most <- data_set %>%
group_by(Year) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Year)
return(list(art_1 = artist_1, alb_1 = album_1, year_1 = year_1,
art_most_num = artist_most_num, most_recent = most_recent_album,
most_year = year_with_most, recent_year = most_recent_year,
recent_art = most_recent_artist))
}
