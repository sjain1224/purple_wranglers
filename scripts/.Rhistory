}
return FALSE
}
equal <- function(a, b){
a = b
}
print(equal(4,4))
equal <- function(a, b){
a == b
}
print(equal(4,4))
equal <- function(a, b){
if(a == b) {
return 1;
}
return 2;
}
print(equal(4,4))
equal <- function(a, b){
if(a == b) {
return 1;
}
return 2;
}
print(equal(4,4))
equal <- function(a, b){
if(a == b) {
return 1
}
return 2
}
print(equal(4,4))
equal <- function(a, b){
if(a == b) {
return 1
}
return 2
}
print(equal(4,4))
let <- function(a, b){
if(a == b){
a + 1
}
a
}
let(4, 4)
let <- function(a, b){
if(a = b){
return a + 1
}
a
}
let(4, 4)
let <- function(a, b){
if(a == b){
return a + 1
}
a
}
let(4, 4)
let <- function(a, b){
if(a == b){
return a + 1
}
a
}
let <- function(a, b){
if(a == b){
return (a + 1)
}
a
}
let(4, 4)
# A vector of student names
student_names <- c("Nate", "Ani", "Jeremy", "Daria")
# A vector of student grades (that correspond to the names above based on their position)
student_grades <- c(82, 74, 91, 92)
print(student_names[student_grades > 82])
# Create a vector `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(numbers) {
list(mean = mean(numbers), median = median(numbers),
length = length(numbers))
}
# Create a vector `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
print(summary_1_to_100)
lint("exercise.R")
lintr::lint("exercise.R")
library(lintr)
lint("exercise.R")
lintr::lint("exercise.R")
install.packages("carData")
library("carData")
question3 <- data.frame(Florida)
question3 <- data.frame(Florida, stringsAsFactors = F)
gore_over_bush <- question3$GORE > question3$BUSH
gore_over_bush <- questions3[question3$GORE>question3$BUSH, ]
gore_over_bush <- question3[question3$GORE>question3$BUSH, ]
votes <-gore_over_bush["NADER", ]
votes <- sum(gore_over_bush$NADER)
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
Florida[Florida$GORE > Florida$BUSH,]
nrow(Florida[,Florida$GORE > Florida$BUSH])
nrow(Florida[GORE > BUSH,])
nrow(Florida[Florida$GORE > Florida$BUSH,])
?filter
library(presidentialElection)
?na.rm
?rm.na
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages(pscl)
install.packages("pscl")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome
outcome <- presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
outcome
?unite
?separate
install.packages("nycflights13") # once per machine
library("nycflights13")
View(nycflights13)
View(flights)
modify <- flights %>%
arrange(origin) %>%
summarise(arr_delay) %>%
q()
modify <- flights %>%
arrange(origin) %>%
summarise(delay = mean(arr_delay)) %>%
filter(delay == max(delay)) %>%
select(origin)
modify <- flights %>%
arrange(origin)
modify
View(modify)
next_mod <-modify %>%
summarise(delay = mean(arr_delay))
View(next_mod)
summarize(modify, delay = mean(arr_delay))
modify <- flights %>%
group_by(origin)
View(modify)
modify <- modify %>%
summarize(delay = mean(arr_delay))
delayed <- flights %>%
group_by(origin) %>%
summarize(means = mean(arr_delay)) %>%
filter(means == max(means))
flights left_join(airports, by c("dest" == "faa"))
left_join(flights, airports, by = c("dest" == "faa"))
new_frame <- left_join(flights, airports, by = c("dest" = "faa"))
View(new_frame)
new_frame <- left_join(flights, airports, by = c("origin" = "faa"))
View(new_frame)
spread(new_frame, key = origin, value = arr_delay)
new_frame <- spread(new_frame, key = origin, value = arr_delay)
View(new_frame)
data <- spread(new_frame, key = name, value = arr_delay)
data <- spread(new_frame, key = name, value = arr_delay)
delays <- select(left_join(flights, airports, by = c("origin"="faa")))
View(delay)
View(delays)
delays <- select(left_join(flights, airports, by = c("origin"="faa")), arr_delay, name)
frams <- spread(delays, key = name, value = arr_delay)
delays <- select(left_join(flights, airports, by = c("origin"="faa")), arr_delay, name, flight)
View(delays)
fams <- spread(delays, key = name, value = arr_delay)
new_frame %>%
summarize(means = mean(EWR, na.rm = T), meansj = mean(JFK, na.rm = T), meansl = mean(LGA, na.rm = T)) %>%
filter(mean)
asp]dgk
new_frame %>%
summarize(means = mean())
n1 <- mean(EWR, na.rm = T)
n1 <- mean(new_frame[, EWR], na.rm = T)
n1 <- mean(new_frame[, "EWR"], na.rm = T)
View(new_frame)
n1 <- mean(new_frame[EWR,], na.rm = T)
n1 <- mean(new_frame["EWR",], na.rm = T)
ewr <- select(ewr)
ewr <- select(new_frame, EWR)
mean1 <- mean(ewr, na.rm = T)
mean(flights, arr_delay)
mean(flights, arr_delay, na.rm = T)
mean(flights, arr_delay, na.rm = F)
val <- flights %>%
group_by(origin) %>%
summarize(value = mean(arr_delay)) %>%
filter (value = max(value)) %>%
s
val <- flights %>%
+ group_by(origin) %>%
+ summarize(value = mean(arr_delay)) %>%
+ filter (value = max(value))
colnames(flights)
st1 <- group_by(flights, origin)
st2 <- summarize(st1, val = mean(arr_delay))
flights$origin <- as.factor(flights$origin)
summarise(by_origin, "Mean" = round(mean(dep_delay)))
summarize(flights, "Mean" = mean(arr_delay))
library(dplyr)
?top_n
main3 <- project %>%
filter(year == "2018") %>%
arrange(-backers) %>%
select(main_category) %>%
top_n(3)
# What were the top 3 main categories in 2018 (as ranked by number of backers)?
main3 <- project %>%
filter(year == "2018") %>%
arrange(-backers) %>%
top_n(3)
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
install.packages("ggplot2")
install.packages("ggplot2")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
install_github("ggmap")
devtools::install_github("dkhale/ggmap")
install.packages('ggmap')
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
install.packages("dbplyr") # once per machine
library("DBI")             # in each relevant script
library("dplyr")
# Summary Info
library(dplyr)
setwd("~/Documents/INFO 201A Project/purple_wranglers/scripts")
shooting_df <- read.csv("data/albumlist.csv")
test_df <- read.csv("data/albumlist.csv")
test_df <- read.csv("../data/albumlist.csv")
get_summary_info(test_df)
get_summary_info <- function(data_set) {
artist_1 <- data_set %>%
filter(Number == 1) %>%
pull(Artist)
album_1 <- data_set %>%
filter(Number == 1) %>%
pull(Album)
artist_most_num <- data_set %>%
group_by(artist) %>%
mutate(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(artist)
most_recent_album <- data_set %>%
filter(Year == max(Year)) %>%
pull(Album)
year_with_most <- data_set %>%
group_by(Year) %>%
mutate(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Year)
}
get_summary_info(test_df)
get_summary_info <- function(data_set) {
artist_1 <- data_set %>%
filter(Number == 1) %>%
pull(Artist)
album_1 <- data_set %>%
filter(Number == 1) %>%
pull(Album)
artist_most_num <- data_set %>%
group_by(Artist) %>%
mutate(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
most_recent_album <- data_set %>%
filter(Year == max(Year)) %>%
pull(Album)
year_with_most <- data_set %>%
group_by(Year) %>%
mutate(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Year)
}
get_summary_info(test_df)
View(get_summary_info)
get_summary_info <- function(data_set) {
artist_1 <- data_set %>%
filter(Number == 1) %>%
pull(Artist)
album_1 <- data_set %>%
filter(Number == 1) %>%
pull(Album)
artist_most_num <- data_set %>%
group_by(Artist) %>%
mutate(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
most_recent_album <- data_set %>%
filter(Year == max(Year)) %>%
pull(Album)
year_with_most <- data_set %>%
group_by(Year) %>%
mutate(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Year)
return(list(art_1 = artist_1, alb_1 = album_1,
art_most_num = artist_most_num, most_recent = most_recent_album,
most_year = year_with_most))
}
get_summary_info(test_df)
test <- get_summary_info(test_df)
test$art_1
test$alb_1
test$art_most_num
test1 <- test_df %>%
group_by(Artist) %>%
mutate(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
test1
test1 <- test_df %>%
group_by(Artist) %>%
mutate(num_albums = n(Artist)) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
test1 <- test_df %>%
group_by(Artist) %>%
mutate(num_albums = count()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
test1 <- test_df %>%
group_by(Artist) %>%
mutate(num_albums = count(Artist)) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
test1 <- test_df %>%
group_by(Artist) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
test1
test$most_recent
test$most_year
get_summary_info <- function(data_set) {
artist_1 <- data_set %>%
filter(Number == 1) %>%
pull(Artist)
album_1 <- data_set %>%
filter(Number == 1) %>%
pull(Album)
artist_most_num <- data_set %>%
group_by(Artist) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
most_recent_album <- data_set %>%
filter(Year == max(Year)) %>%
pull(Album)
year_with_most <- data_set %>%
group_by(Year) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Year)
return(list(art_1 = artist_1, alb_1 = album_1,
art_most_num = artist_most_num, most_recent = most_recent_album,
most_year = year_with_most))
}
test <- get_summary_info(test_df)
test$art_most_num
test$most_year
# Summary Info
library(dplyr)
get_summary_info <- function(data_set) {
artist_1 <- data_set %>%
filter(Number == 1) %>%
pull(Artist)
album_1 <- data_set %>%
filter(Number == 1) %>%
pull(Album)
year_1 <- data_set%>%
filter(Number == 1) %>%
pull(Year)
artist_most_num <- data_set %>%
group_by(Artist) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
most_recent_album <- data_set %>%
filter(Year == max(Year)) %>%
pull(Album)
most_recent_artist <-data_set %>%
filter(Year == max(Year)) %>%
pull(Artist)
most_recent_year <- data_set %>%
filter(Year == max(Year)) %>%
pull(Year)
year_with_most <- data_set %>%
group_by(Year) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Year)
return(list(art_1 = artist_1, alb_1 = album_1,
art_most_num = artist_most_num, most_recent = most_recent_album,
most_year = year_with_most))
}
test_df <- read.csv("../data/albumlist.csv")
temp <- get_summary_info(test_df)
get_summary_info <- function(data_set) {
artist_1 <- data_set %>%
filter(Number == 1) %>%
pull(Artist)
album_1 <- data_set %>%
filter(Number == 1) %>%
pull(Album)
year_1 <- data_set%>%
filter(Number == 1) %>%
pull(Year)
artist_most_num <- data_set %>%
group_by(Artist) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Artist)
most_recent_album <- data_set %>%
filter(Year == max(Year)) %>%
pull(Album)
most_recent_artist <-data_set %>%
filter(Year == max(Year)) %>%
pull(Artist)
most_recent_year <- data_set %>%
filter(Year == max(Year)) %>%
pull(Year)
year_with_most <- data_set %>%
group_by(Year) %>%
summarize(num_albums = n()) %>%
filter(num_albums == max(num_albums)) %>%
pull(Year)
return(list(art_1 = artist_1, alb_1 = album_1, year_1 = year_1,
art_most_num = artist_most_num, most_recent = most_recent_album,
most_year = year_with_most, recent_year = most_recent_year,
recent_art = most_recent_artist))
}
temp = get_summary_info(test_df)
temp$year_1
temp$recent_year
temp$recent_art
library(lintr)
lint("sum-info.R")
lint("sum-info.R")
lint("sum-info.R")
