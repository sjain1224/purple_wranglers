group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances))
return(table)
}
test <- summary_table(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances)) %>%
select(decade, Artist, Appearances)
return(table)
}
test <- summary_table(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances)) %>%
distinct(decade, Artist, Appearances)
return(table)
}
test <- summary_table(data)
View(test)
setwd("C:/Users/camer/info201/a5-CamSims")
# A5 Data Report
# Preparation ---------------------------------------------------------------
# Load the 'dplyr' package
library("dplyr")
# Load the 'leaflet' package
library("leaflet")
# Load the 'ggplot2' package
library("ggplot2")
# Load the 'tidyr' package
library("tidyr")
# Load the data, making sure to not interpret strings as factors
shootings <- read.csv("data/shootings-2018.csv", stringsAsFactors = F)
# Functions for Obtaining Information ---------------------------------------
# Obtain information for a specific incident, adding a column for total impacted
incident_info <- function(df, incident_state, incident_date) {
info <- df %>%
filter( (state == incident_state) & (date == incident_date)) %>%
mutate(total_impacted = sum(num_killed + num_injured))
return(info)
}
# Summary Information -------------------------------------------------------
# Calculate the number of total shootings that occurred
shooting_occurrences <- nrow(shootings)
# Calculate the total number of lives that were lost
lives_lost <- shootings %>%
summarize(sum(num_killed, na.rm = T)) %>%
pull()
# Calculate which city was most impacted by shootings. In this case, "most
# impacted" refers to the city with the greatest sum of people killed and
# injured.
city_most_impacted <- shootings %>%
group_by(city) %>%
summarize(total_impacted = sum(num_killed, num_injured, na.rm = T)) %>%
filter(total_impacted == max(total_impacted, na.rm = T)) %>%
pull(city)
# Calculate which state(s) had the greatest number of shootings
states_most_shootings <- shootings %>%
group_by(state) %>%
add_count(state, name = "total_shootings") %>%
distinct(state, total_shootings) %>%
summarize(total_shootings = sum(total_shootings)) %>%
filter(total_shootings == max(total_shootings)) %>%
pull(state)
# Calculate which state(s) had the least amount of shootings
states_least_shootings <- shootings %>%
group_by(state) %>%
add_count(state, name = "total_shootings") %>%
distinct(state, total_shootings) %>%
summarize(total_shootings = sum(total_shootings)) %>%
filter(total_shootings == min(total_shootings)) %>%
pull(state)
# Summary Table -------------------------------------------------------------
# Create aggregate table of information based on total impacted in each state,
# showing top 10's total shootings, total impacted, and the most dangerous
# city/cities within each state.
state_summaries <- shootings %>%
group_by(state) %>%
mutate(total_people_impacted = sum(num_killed, num_injured, na.rm = T)) %>%
add_count(state, name = "total_state_shootings") %>%
add_count(city, name = "total_city_shootings") %>%
filter(total_city_shootings == max(total_city_shootings, na.rm = T)) %>%
distinct(state, city, total_state_shootings, total_people_impacted) %>%
mutate(most_dangerous_city = toString(city)) %>%
select(-city) %>%
distinct(state, most_dangerous_city, total_state_shootings,
total_people_impacted) %>%
ungroup() %>%
top_n(10, total_people_impacted) %>%
arrange(desc(total_people_impacted))
# Description of Particular Incident (Florida - February 14, 2018)-----------
# Get all information on incident
incident_summary <- incident_info(shootings, "Florida", "February 14, 2018")
# Get date of incident
incident_date <- "February 14, 2018"
# Get location of incident
incident_location <- paste(incident_summary$city, ", Florida")
# Get number of people injured during incident
incident_injured <- incident_summary$num_injured
# Get number of people killed during incident
incident_killed <- incident_summary$num_killed
# An Interactive Map --------------------------------------------------------
# Create summary information for each location
loc_info <- shootings %>%
group_by(lat, long) %>%
add_count(lat, name = "total_shootings") %>%
mutate(total_injured = sum(num_injured),
total_killed = sum(num_killed)) %>%
select(lat, long, city, total_shootings, total_injured, total_killed)
# Set location latitudes, longitudes, and labels
locations <- data.frame(
latitude = loc_info$lat,
longitude = loc_info$long,
label = paste0("City: ", loc_info$city, "<br>",
"Total Shootings: ", loc_info$total_shootings, "<br>",
"Total Injured: ", loc_info$total_injured, "<br>",
"Total Killed: ", loc_info$total_killed),
radius = (loc_info$total_injured + loc_info$total_killed) * 500,
stringsAsFactors = FALSE
)
# Graph each location as a circle, adding popup information
map <- leaflet(data = locations) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~latitude,
lng = ~longitude,
popup = ~label,
radius = ~radius,
stroke = FALSE
)
# Create a Plot of My Choice ------------------------------------------------
# Question to Answer: What are the number of shootings each month for each
#                     region in the U.S.?
# Create a data frame containing each state categorized by its region, each
# month and its number (1-12), and the number of shootings that took place in
# that state in that month.
regions <- shootings %>%
group_by(state) %>%
mutate(state_region = state.region[match(unique(state), state.name)]) %>%
replace_na(list(state_region = "Northeast")) %>%
mutate(total_impacted = num_killed + num_injured) %>%
ungroup() %>%
mutate(month = gsub(",", "", date)) %>%
mutate(month = as.character(as.Date(month, format = "%B %d %Y"),
format = "%b")) %>%
group_by(state_region, month) %>%
add_count(month, name = "shootings") %>%
mutate(month_number = match(month, month.abb)) %>%
ungroup() %>%
distinct(shootings, state_region, month, month_number)
# Plot the 'regions' data using small multiples of a histogram, adding a title
# and axis labels.
plot <- ggplot(data = regions) +
geom_col(mapping = aes(x = reorder(month, month_number), y = shootings)) +
labs(title = "Monthly Shootings In Each Region",
x = "Month",
y = "Number of Shootings") +
theme(plot.title = element_text(hjust = 0.5)) +
facet_wrap(~state_region)
View(state_summaries)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T))
return(table)
}
test <- summary_table(data)
setwd("C:/Users/camer/info_project/scripts")
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T))
return(table)
}
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T))
return(table)
}
test <- summary_table(data)
View(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T)) %>%
distinct(decade, Total Albums, Average Song Rank, Appearances)
return(table)
}
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T)) %>%
distinct(decade, Total Albums, Average Song Rank, Appearances)
return(table)
}
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T))# %>%
#distinct(decade, Total Albums, Average Song Rank, Appearances)
return(table)
}
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T)) %>%
distinct(decade, Total Albums, Average Song Rank, Appearances)
return(table)
}
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T)) %>%
ungroup() %>%
distinct(decade, Total Albums, Average Song Rank, Appearances)
return(table)
}
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T)) %>%
distinct(decade)
return(table)
}
test <- summary_table(data)
View(test)
View(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T))
return(table)
}
test <- summary_table(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "Total Albums") %>%
mutate("Average Song Rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "Appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T)) %>%
distinct(decade)
return(table)
}
#decade, Total Albums, Artist, Average Song Rank, Appearances
test <- summary_table(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "total_albums") %>%
mutate("average_song_rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "appearances") %>%
group_by(decade) %>%
filter(Appearances == max(Appearances, na.rm = T)) %>%
distinct(decade, total_albums, Artist, average_song_rank, appearances)
return(table)
}
#decade, Total Albums, Artist, Average Song Rank, Appearances
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "total_albums") %>%
mutate("average_song_rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "appearances") %>%
group_by(decade) %>%
filter(appearances == max(appearances, na.rm = T)) %>%
distinct(decade, total_albums, Artist, average_song_rank, appearances)
return(table)
}
#decade, Total Albums, Artist, Average Song Rank, Appearances
test <- summary_table(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "total_albums") %>%
mutate("average_song_rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "appearances") %>%
group_by(decade) %>%
filter(appearances == max(appearances, na.rm = T)) %>%
distinct(decade, total_albums, Artist, average_song_rank, appearances) %>%
mutate(most_popular = toString(artist))
return(table)
}
#decade, Total Albums, Artist, Average Song Rank, Appearances
test <- summary_table(data)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "total_albums") %>%
mutate("average_song_rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "appearances") %>%
group_by(decade) %>%
filter(appearances == max(appearances, na.rm = T)) %>%
distinct(decade, total_albums, Artist, average_song_rank, appearances) %>%
mutate(most_popular = toString(Artist))
return(table)
}
#decade, Total Albums, Artist, Average Song Rank, Appearances
test <- summary_table(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "total_albums") %>%
mutate("average_song_rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "appearances") %>%
group_by(decade) %>%
filter(appearances == max(appearances, na.rm = T)) %>%
distinct(decade, total_albums, Artist, average_song_rank, appearances) %>%
mutate(most_popular = toString(Artist)) %>%
select(decade, total_albums, average_song_rank, most_popular)
return(table)
}
#decade, Total Albums, Artist, Average Song Rank, Appearances
test <- summary_table(data)
View(test)
# Midpoint Deliverable - Summary Table
# Import the "dplyr" library
library("dplyr")
data <- read.csv("../data/albumlist.csv", stringsAsFactors = F)
summary_table <- function(df) {
table <- df %>%
mutate("decade" = floor(Year / 10)*10) %>%
group_by(decade) %>%
add_count(decade, name = "total_albums") %>%
mutate("average_song_rank" = round(mean(Number, na.rm = T),2)) %>%
group_by(decade, Artist) %>%
add_count(Artist, name = "appearances") %>%
group_by(decade) %>%
filter(appearances == max(appearances, na.rm = T)) %>%
distinct(decade, total_albums, Artist, average_song_rank, appearances) %>%
mutate(most_popular = toString(Artist)) %>%
distinct(decade, total_albums, average_song_rank, most_popular)
return(table)
}
#decade, Total Albums, Artist, Average Song Rank, Appearances
test <- summary_table(data)
